<?php

/**
 * Created by ModulesGarden.
 *
 * PHP version 7
 *
 * @author ModulesGarden <contact@modulesgarden.com>
 *
 * @see https://www.modulesgarden.com/
 *
 *  * ******************************************************************
 *
 * This software is furnished under a license and may be used and copied
 * only  in  accordance  with  the  terms  of such  license and with the
 * inclusion of the above copyright notice.  This software  or any other
 * copies thereof may not be provided or otherwise made available to any
 * other person.  No title to and  ownership of the  software is  hereby
 * transferred.
 *
 *  * ******************************************************************
 */

namespace ModulesGarden\upCloudVm;

use WHMCS\View\Menu\Item as MenuItem;
use Illuminate\Database\Capsule\Manager as Capsule;

/**
 * Helper.
 *
 * @author ModulesGarden <contact@modulesgarden.com>
 *
 * @see https://www.modulesgarden.com/
 * Helper Methods.
 */
class Helper
{
    /**
     * Loads lang file.
     *
     * @return array
     */
    public static function getLang()
    {
        $languageDir = dirname(__FILE__).DIRECTORY_SEPARATOR.'lang'.DIRECTORY_SEPARATOR;
        $config = $GLOBALS['CONFIG'];
        $language = isset($_SESSION['Language']) ? $_SESSION['Language'] : $config['Language'];
        $languageFile = file_exists($languageDir.$language.'.php') ? $language : 'english';
        if (file_exists(dirname(__FILE__).DIRECTORY_SEPARATOR.'lang'.DIRECTORY_SEPARATOR.'english.php')) {
            include dirname(__FILE__).DIRECTORY_SEPARATOR.'lang'.DIRECTORY_SEPARATOR.'english.php';
        }

        require $languageDir.$languageFile.'.php';

        return isset($_LANG) ? $_LANG : [];
    }

    /**
     * Check if storage is writable for console usage.
     *
     * @return bool
     */
    public static function checkStorage()
    {
        $file = dirname(__FILE__).'/storage/target.config.d/test';
        $fileOpen = fopen($file, 'w+');
        if (!$fileOpen) {
            return false;
        }

        fclose($fileOpen);
        unlink($file);

        return true;
    }

    /**
     * This function generates required configurable options and custom fields.
     *
     * @param string $field field name
     */
    public static function generateFields(string $field = '')
    {
        $product = \WHMCS\Product\Product::find(filter_input(INPUT_GET, 'id', FILTER_SANITIZE_NUMBER_INT));

        if ($field == 'custom') {
            Capsule::table('tblcustomfields')
                ->updateOrInsert(['type' => 'product', 'relid' => $product->id, 'fieldname' => 'SSHKey|SSH Key'], ['showorder' => 'on', 'fieldtype' => 'textarea']);
            Capsule::table('tblcustomfields')
                ->updateOrInsert(['type' => 'product', 'relid' => $product->id, 'fieldname' => 'initialization|Initialization Script'], ['showorder' => 'on', 'fieldtype' => 'textarea']);

            header('Location: configproducts.php?action=edit&id='.\App::getFromRequest('id').'&tab=4');
            die;
        }

        if ($field == 'configurable') {
            try {
                $server = Capsule::table('tblservers')
                    ->join('tblservergroupsrel', 'tblservergroupsrel.serverid', '=', 'tblservers.id')
                    ->where('tblservergroupsrel.groupid', $product->serverGroup)
                    ->first();

                $params['serverusername'] = $server->username;
                $params['serverpassword'] = decrypt($server->password);
                $params['serverhostname'] = $server->hostname;
                $params['serverip'] = $server->ipaddress;
                $params['serversecure'] = $server->secure;

                $manager = new Manager($params);
                $pomZones = $manager->getZones()['data']->zones->zone;
                foreach ($pomZones as $pomZone) {
                    $zones[$pomZone->id] = $pomZone->description;
                }

                if (empty($zones) || empty($product)) {
                    return;
                }

                Capsule::table('tblproductconfiggroups')
                    ->updateOrInsert(['name' => 'Configurable options for UpCloud'], ['description' => 'Auto generated by module']);

                $groupId = Capsule::table('tblproductconfiggroups')->where('name', 'Configurable options for UpCloud')->first()->id;

                Capsule::table('tblproductconfiglinks')
                    ->updateOrInsert(['gid' => $groupId, 'pid' => $product->id], ['gid' => $groupId, 'pid' => $product->id]);

                Capsule::table('tblproductconfigoptions')->updateOrInsert(
                    [
                        'gid' => $groupId,
                        'optionname' => 'Storage',
                    ],
                    [
                        'optiontype' => 4,
                        'qtyminimum' => 10,
                        'qtymaximum' => 1024,
                    ]
                );

                $currencyId = Capsule::table('tblcurrencies')->where('default', '1')->first()->id;

                Capsule::table('tblproductconfigoptions')
                    ->updateOrInsert(['gid' => $groupId, 'optionname' => 'Location'], ['optiontype' => 1]);

                $optionId = Capsule::table('tblproductconfigoptions')
                    ->where('gid', $groupId)->where('optionname', 'Storage')->first()->id;

                Capsule::table('tblproductconfigoptionssub')->updateOrInsert(['optionname' => 'GB'], ['configid' => $optionId]);

                $ids = Capsule::table('tblproductconfigoptionssub')->where('configid', $optionId)->get();
                foreach ($ids as $id) {
                    Capsule::table('tblpricing')
                        ->updateOrInsert(
                            ['type' => 'configoptions', 'relid' => $id->id],
                            ['currency' => $currencyId]
                        );
                }

                $optionId = Capsule::table('tblproductconfigoptions')
                    ->where('gid', $groupId)->where('optionname', 'Location')->first()->id;

                foreach ($zones as $zon => $val) {
                    Capsule::table('tblproductconfigoptionssub')
                        ->updateOrInsert(['optionname' => $zon.'|'.$val], ['configid' => $optionId]);
                }

                $ids = Capsule::table('tblproductconfigoptionssub')->where('configid', $optionId)->get();
                foreach ($ids as $id) {
                    Capsule::table('tblpricing')
                        ->updateOrInsert(
                            ['type' => 'configoptions', 'relid' => $id->id],
                            ['currency' => $currencyId]
                        );
                }
            } catch (Exception $e) {
                return;
            }

            header('Location: configproducts.php?action=edit&id='.\ App::getFromRequest('id').'&tab=5');
            die;
        }

        header('Location: configproducts.php?action=edit&id='.\App::getFromRequest('id').'&tab=3');
        die;
    }

    /**
     * Ajax actions manager.
     *
     * @param array  $params WHMCS Params
     * @param string $action manager Method
     */
    public static function ajaxAction(array $params, string $action)
    {
        ob_clean();
        try {
            $manager = new Manager($params);
            $_LANG = self::getLang();

            if (method_exists($manager, $action)) {
                $results = $manager->$action();
                $results['message'] = (!empty($_LANG['ajax'][$action])) ? $_LANG['ajax'][$action] : $_LANG['ajax']['action']['success'];
            } else {
                $results['result'] = 'failure';
                $results['message'] = $_LANG['ajax']['action']['not_valid'];
            }

            echo json_encode($results);
            die;
        } catch (\Exception $e) {
            echo json_encode(['result' => 'failure', 'message' => $e->getMessage()]);
            die;
        }
    }

    /**
     * Opens NO-VNC Console.
     *
     * @param array $params WHMCS Params
     */
    public static function runConsole(array $params)
    {
        ob_clean();
        try {
            $manager = new Manager($params);
            $response = $manager->getServerDetails();
            $details = $response['data']->server;
            if ($details->state != 'started') {
                echo 'Server is not online';
                die();
            }

            $token = md5(uniqid((string) rand(), true));
            $file = dirname(__FILE__).'/storage/target.config.d/'.$token;
            $content = $token.': '.$details->vnc_host.':'.$details->vnc_port;
            $fop = fopen($file, 'w+');
            fwrite($fop, $content);
            fclose($fop);

            $protocol = (filter_input(INPUT_SERVER, 'HTTPS', FILTER_SANITIZE_STRING) == 'on') ? 'https://' : 'http://';
            $src = $protocol.filter_input(INPUT_SERVER, 'HTTP_HOST', FILTER_SANITIZE_STRING).':45969/vnc.html?autoconnect=true&password='.$details->vnc_password.'&path=?token='.$token;
            echo '<iframe src="'.$src.'" scrolling="auto" height="100%" width="100%" frameborder="0"></iframe><style>body{margin:0px;}</style>';
            die();
        } catch (\Exception $e) {
            echo $e->getMessage();
            die();
        }
    }

    /**
     * Gather necessary data for specific client area page.
     *
     * @param array  $params WHMCS Params
     * @param string $page   client Area Page
     *
     * @return array
     */
    public static function getData(array $params, string $page)
    {
        try {
            $manager = new Manager($params);
            switch ($page) {
                case 'details':
                    $details = $manager->getServerDetails();

                    if ($details['result'] == 'success') {
                        $details = $details['data']->server;

                        $templ = $manager->getTemplate();
                        $zones = $manager->getZones();

                        foreach ($zones['data']->zones->zone as $zone) {
                            if ($zone->id == $details->zone) {
                                $details->zone = $zone->description;
                                break;
                            }
                        }

                        $vnc = $details->remote_access_enabled;
                        if ($vnc == 'yes') {
                            $vnc = 'on';
                        } else {
                            $vnc = 'off';
                        }

                        $data['details'] = [
                            'hostname' => $details->hostname,
                            'ip' => $details->ip,
                            'uuid' => $details->uuid,
                            'plan' => $details->plan,
                            'template' => $templ['data']->storage->title,
                            'status' => $details->state,
                            'location' => $details->zone,
                            'vnc' => $vnc,
                            'vnc_host' => $details->remote_access_host,
                            'vnc_port' => $details->remote_access_port,
                            'vnc_password' => $details->remote_access_password,
                        ];

                        $ips = [];

                        if (!empty($details->ip_addresses)) {
                            foreach ($details->ip_addresses->ip_address as $ip) {
                                if ($ip->access == 'public' && $ip->family == 'IPv4') {
                                    $data['details']['ip'] = $ip->address;
                                }

                                $ips[] = [
                                    'address' => $ip->address,
                                    'access' => $ip->access,
                                    'family' => $ip->family,
                                ];
                            }

                            $data['details']['ips'] = $ips;
                        }
                    }
                    break;
                case 'editConfiguration':
                    $data['details'] = $manager->getServerDetails()['data']->server;
                    $data['timezones'] = $manager->getTimezones()['data']->timezones->timezone;
                    break;
                case 'vncconsole':
                    $data['details'] = $manager->getServerDetails()['data']->server;
                    break;
                case 'snapshotsManagement':
                    $data['details'] = $manager->getStorageDetails()['data']->storage->backup_rule;
                    $data['details']->time = ($data['details']->time == '0000') ? '00' : str_replace('0', '', $data['details']->time);
                    break;
            }
        } catch (\Exception $e) {
            return [];
        }

        return $data;
    }

    /**
     * Adds Client Area Primary Sidebar Hook with additional sidebar options.
     *
     * @param array $params WHMCS Params
     */
    public static function clientAreaPrimarySidebarHook(array $params)
    {
        add_hook('ClientAreaPrimarySidebar', 1, function (MenuItem $primarySidebar) use ($params) {
            $_LANG = Helper::getLang();
            $panel = $primarySidebar->getChild('Service Details Overview');
            if (is_a($panel, 'WHMCS\View\Menu\Item')) {
                $panel = $panel->getChild('Information');
                if (is_a($panel, 'WHMCS\View\Menu\Item')) {
                    $panel->setUri("clientarea.php?action=productdetails&id={$params['serviceid']}");
                    $panel->setAttributes([]);
                }
            }

            if ($params['status'] == 'Active') {
                $manageVm = $primarySidebar->addChild('ManageVM', [
                    'label' => $_LANG['manageVM'],
                    'uri' => '#',
                    'order' => '100',
                    'icon' => 'fa-bars',
                ]);

                if (!empty($manageVm)) {
                    $manageVm->addChild('editConfiguration')
                        ->setLabel($_LANG['server']['title'])
                        ->setUri('clientarea.php?action=productdetails&amp;id='.$params['serviceid'].'&amp;modop=custom&a=management&page=editConfiguration')
                        ->setOrder(2);
                    $manageVm->addChild('snapshotsManagement')
                        ->setLabel($_LANG['backups']['title'])
                        ->setUri('clientarea.php?action=productdetails&amp;id='.$params['serviceid'].'&amp;modop=custom&a=management&page=snapshotsManagement')
                        ->setOrder(4);
                    $manageVm->addChild('networkManagement')
                        ->setLabel($_LANG['network']['title'])
                        ->setUri('clientarea.php?action=productdetails&amp;id='.$params['serviceid'].'&amp;modop=custom&a=management&page=networkManagement')
                        ->setOrder(5);
                    $manageVm->addChild('firewallManagement')
                        ->setLabel($_LANG['firewall']['title'])
                        ->setUri('clientarea.php?action=productdetails&amp;id='.$params['serviceid'].'&amp;modop=custom&a=management&page=firewallManagement')
                        ->setOrder(6);
                    $manageVm->addChild('bandwidthGraphs')
                        ->setLabel($_LANG['bandwidth']['title'])
                        ->setUri('clientarea.php?action=productdetails&amp;id='.$params['serviceid'].'&amp;modop=custom&a=management&page=bandwidthGraphs')
                        ->setOrder(7);
                    $manageVm->addChild('vncconsole')
                        ->setLabel($_LANG['vnc']['title'])
                        ->setUri('clientarea.php?action=productdetails&amp;id='.$params['serviceid'].'&amp;modop=custom&a=management&page=vncconsole')
                        ->setOrder(8);
                }
            }
        });
    }
}
